// Generated by github.com/yoyo-project/yoyo

package person

import (
	"fmt"

	"github.com/yoyo-project/yoyo/example/mysql/yoyo/repositories/query"
)

type Query struct {
	n query.Node
}

func (q Query) SQL() (string, []interface{}) {
	cs, ps := q.n.SQL()
	return fmt.Sprintf("WHERE %s", cs), ps
}

func (q Query) Or(q2 Query) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, q2.n},
		Operator: query.Or,
	}}
}

func (q Query) Id(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, Id(val).n},
		Operator: query.And,
	}}
}

func (q Query) IdNot(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, IdNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) IdGreaterThan(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, IdGreaterThan(val).n},
		Operator: query.And,
	}}
}

func (q Query) IdLessThan(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, IdLessThan(val).n},
		Operator: query.And,
	}}
}

func (q Query) IdGreaterOrEqual(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, IdGreaterOrEqual(val).n},
		Operator: query.And,
	}}
}

func (q Query) IdLessOrEqual(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, IdLessOrEqual(val).n},
		Operator: query.And,
	}}
}

func (q Query) Name(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, Name(val).n},
		Operator: query.And,
	}}
}

func (q Query) NameNot(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NameNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) NameContains(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NameContains(val).n},
		Operator: query.And,
	}}
}

func (q Query) NameContainsNot(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NameContainsNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) NameStartsWith(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NameStartsWith(val).n},
		Operator: query.And,
	}}
}

func (q Query) NameStartsWithNot(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NameStartsWithNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) NameEndsWith(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NameEndsWith(val).n},
		Operator: query.And,
	}}
}

func (q Query) NameEndsWithNot(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NameEndsWithNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) Nickname(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, Nickname(val).n},
		Operator: query.And,
	}}
}

func (q Query) NicknameNot(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NicknameNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) NicknameContains(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NicknameContains(val).n},
		Operator: query.And,
	}}
}

func (q Query) NicknameContainsNot(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NicknameContainsNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) NicknameStartsWith(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NicknameStartsWith(val).n},
		Operator: query.And,
	}}
}

func (q Query) NicknameStartsWithNot(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NicknameStartsWithNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) NicknameEndsWith(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NicknameEndsWith(val).n},
		Operator: query.And,
	}}
}

func (q Query) NicknameEndsWithNot(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NicknameEndsWithNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) FavoriteColor(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, FavoriteColor(val).n},
		Operator: query.And,
	}}
}

func (q Query) FavoriteColorNot(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, FavoriteColorNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) FavoriteColorContains(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, FavoriteColorContains(val).n},
		Operator: query.And,
	}}
}

func (q Query) FavoriteColorContainsNot(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, FavoriteColorContainsNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) FavoriteColorStartsWith(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, FavoriteColorStartsWith(val).n},
		Operator: query.And,
	}}
}

func (q Query) FavoriteColorStartsWithNot(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, FavoriteColorStartsWithNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) FavoriteColorEndsWith(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, FavoriteColorEndsWith(val).n},
		Operator: query.And,
	}}
}

func (q Query) FavoriteColorEndsWithNot(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, FavoriteColorEndsWithNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) FavoriteColorIsNull() Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, FavoriteColorIsNull().n},
		Operator: query.And,
	}}
}

func (q Query) FavoriteColorIsNotNull() Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, FavoriteColorIsNotNull().n},
		Operator: query.And,
	}}
}

func (q Query) Age(val float64) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, Age(val).n},
		Operator: query.And,
	}}
}

func (q Query) AgeNot(val float64) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, AgeNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) AgeGreaterThan(val float64) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, AgeGreaterThan(val).n},
		Operator: query.And,
	}}
}

func (q Query) AgeLessThan(val float64) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, AgeLessThan(val).n},
		Operator: query.And,
	}}
}

func (q Query) AgeGreaterOrEqual(val float64) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, AgeGreaterOrEqual(val).n},
		Operator: query.And,
	}}
}

func (q Query) AgeLessOrEqual(val float64) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, AgeLessOrEqual(val).n},
		Operator: query.And,
	}}
}

func (q Query) HometownId(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, HometownId(val).n},
		Operator: query.And,
	}}
}

func (q Query) HometownIdNot(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, HometownIdNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) HometownIdGreaterThan(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, HometownIdGreaterThan(val).n},
		Operator: query.And,
	}}
}

func (q Query) HometownIdLessThan(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, HometownIdLessThan(val).n},
		Operator: query.And,
	}}
}

func (q Query) HometownIdGreaterOrEqual(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, HometownIdGreaterOrEqual(val).n},
		Operator: query.And,
	}}
}

func (q Query) HometownIdLessOrEqual(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, HometownIdLessOrEqual(val).n},
		Operator: query.And,
	}}
}


func Id(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "id",
			Operator: query.Equals,
			Value:    val,
		},
	}}
}

func IdNot(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "id",
			Operator: query.NotEquals,
			Value:    val,
		},
	}}
}

func IdGreaterThan(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "id",
			Operator: query.GreaterThan,
			Value:    val,
		},
	}}
}

func IdLessThan(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "id",
			Operator: query.LessThan,
			Value:    val,
		},
	}}
}

func IdGreaterOrEqual(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "id",
			Operator: query.GreaterOrEqual,
			Value:    val,
		},
	}}
}

func IdLessOrEqual(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "id",
			Operator: query.LessOrEqual,
			Value:    val,
		},
	}}
}

func Name(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "name",
			Operator: query.Equals,
			Value:    val,
		},
	}}
}

func NameNot(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "name",
			Operator: query.NotEquals,
			Value:    val,
		},
	}}
}

func NameContains(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "name",
			Operator: query.Like,
			Value:    fmt.Sprintf("'%%%s%%'", val),
		},
	}}
}

func NameContainsNot(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "name",
			Operator: query.NotLike,
			Value:    fmt.Sprintf("'%%%s%%'", val),
		},
	}}
}

func NameStartsWith(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "name",
			Operator: query.Like,
			Value:    fmt.Sprintf("'%s%%'", val),
		},
	}}
}

func NameStartsWithNot(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "name",
			Operator: query.NotLike,
			Value:    fmt.Sprintf("'%s%%'", val),
		},
	}}
}

func NameEndsWith(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "name",
			Operator: query.Like,
			Value:    fmt.Sprintf("'%%%s'", val),
		},
	}}
}

func NameEndsWithNot(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "name",
			Operator: query.NotLike,
			Value:    fmt.Sprintf("'%%%s'", val),
		},
	}}
}

func Nickname(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "nickname",
			Operator: query.Equals,
			Value:    val,
		},
	}}
}

func NicknameNot(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "nickname",
			Operator: query.NotEquals,
			Value:    val,
		},
	}}
}

func NicknameContains(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "nickname",
			Operator: query.Like,
			Value:    fmt.Sprintf("'%%%s%%'", val),
		},
	}}
}

func NicknameContainsNot(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "nickname",
			Operator: query.NotLike,
			Value:    fmt.Sprintf("'%%%s%%'", val),
		},
	}}
}

func NicknameStartsWith(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "nickname",
			Operator: query.Like,
			Value:    fmt.Sprintf("'%s%%'", val),
		},
	}}
}

func NicknameStartsWithNot(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "nickname",
			Operator: query.NotLike,
			Value:    fmt.Sprintf("'%s%%'", val),
		},
	}}
}

func NicknameEndsWith(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "nickname",
			Operator: query.Like,
			Value:    fmt.Sprintf("'%%%s'", val),
		},
	}}
}

func NicknameEndsWithNot(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "nickname",
			Operator: query.NotLike,
			Value:    fmt.Sprintf("'%%%s'", val),
		},
	}}
}

func FavoriteColor(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "favorite_color",
			Operator: query.Equals,
			Value:    val,
		},
	}}
}

func FavoriteColorNot(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "favorite_color",
			Operator: query.NotEquals,
			Value:    val,
		},
	}}
}

func FavoriteColorContains(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "favorite_color",
			Operator: query.Like,
			Value:    fmt.Sprintf("'%%%s%%'", val),
		},
	}}
}

func FavoriteColorContainsNot(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "favorite_color",
			Operator: query.NotLike,
			Value:    fmt.Sprintf("'%%%s%%'", val),
		},
	}}
}

func FavoriteColorStartsWith(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "favorite_color",
			Operator: query.Like,
			Value:    fmt.Sprintf("'%s%%'", val),
		},
	}}
}

func FavoriteColorStartsWithNot(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "favorite_color",
			Operator: query.NotLike,
			Value:    fmt.Sprintf("'%s%%'", val),
		},
	}}
}

func FavoriteColorEndsWith(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "favorite_color",
			Operator: query.Like,
			Value:    fmt.Sprintf("'%%%s'", val),
		},
	}}
}

func FavoriteColorEndsWithNot(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "favorite_color",
			Operator: query.NotLike,
			Value:    fmt.Sprintf("'%%%s'", val),
		},
	}}
}

func FavoriteColorIsNull() Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "favorite_color",
			Operator: query.IsNull,
		},
	}}
}

func FavoriteColorIsNotNull() Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "favorite_color",
			Operator: query.IsNotNull,
		},
	}}
}

func Age(val float64) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "age",
			Operator: query.Equals,
			Value:    val,
		},
	}}
}

func AgeNot(val float64) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "age",
			Operator: query.NotEquals,
			Value:    val,
		},
	}}
}

func AgeGreaterThan(val float64) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "age",
			Operator: query.GreaterThan,
			Value:    val,
		},
	}}
}

func AgeLessThan(val float64) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "age",
			Operator: query.LessThan,
			Value:    val,
		},
	}}
}

func AgeGreaterOrEqual(val float64) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "age",
			Operator: query.GreaterOrEqual,
			Value:    val,
		},
	}}
}

func AgeLessOrEqual(val float64) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "age",
			Operator: query.LessOrEqual,
			Value:    val,
		},
	}}
}

func HometownId(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "fk_city_id",
			Operator: query.Equals,
			Value:    val,
		},
	}}
}

func HometownIdNot(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "fk_city_id",
			Operator: query.NotEquals,
			Value:    val,
		},
	}}
}

func HometownIdGreaterThan(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "fk_city_id",
			Operator: query.GreaterThan,
			Value:    val,
		},
	}}
}

func HometownIdLessThan(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "fk_city_id",
			Operator: query.LessThan,
			Value:    val,
		},
	}}
}

func HometownIdGreaterOrEqual(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "fk_city_id",
			Operator: query.GreaterOrEqual,
			Value:    val,
		},
	}}
}

func HometownIdLessOrEqual(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "fk_city_id",
			Operator: query.LessOrEqual,
			Value:    val,
		},
	}}
}

