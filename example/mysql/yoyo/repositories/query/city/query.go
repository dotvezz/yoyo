// Generated by github.com/yoyo-project/yoyo

package city

import (
	"fmt"

	"github.com/yoyo-project/yoyo/example/mysql/yoyo/repositories/query"
)

type Query struct {
	n query.Node
}

func (q Query) SQL() (string, []interface{}) {
	cs, ps := q.n.SQL()
	return fmt.Sprintf("WHERE %s", cs), ps
}

func (q Query) Or(q2 Query) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, q2.n},
		Operator: query.Or,
	}}
}

func (q Query) Id(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, Id(val).n},
		Operator: query.And,
	}}
}

func (q Query) IdNot(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, IdNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) IdGreaterThan(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, IdGreaterThan(val).n},
		Operator: query.And,
	}}
}

func (q Query) IdLessThan(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, IdLessThan(val).n},
		Operator: query.And,
	}}
}

func (q Query) IdGreaterOrEqual(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, IdGreaterOrEqual(val).n},
		Operator: query.And,
	}}
}

func (q Query) IdLessOrEqual(val uint32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, IdLessOrEqual(val).n},
		Operator: query.And,
	}}
}

func (q Query) Name(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, Name(val).n},
		Operator: query.And,
	}}
}

func (q Query) NameNot(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NameNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) NameContains(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NameContains(val).n},
		Operator: query.And,
	}}
}

func (q Query) NameContainsNot(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NameContainsNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) NameStartsWith(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NameStartsWith(val).n},
		Operator: query.And,
	}}
}

func (q Query) NameStartsWithNot(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NameStartsWithNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) NameEndsWith(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NameEndsWith(val).n},
		Operator: query.And,
	}}
}

func (q Query) NameEndsWithNot(val string) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, NameEndsWithNot(val).n},
		Operator: query.And,
	}}
}


func Id(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "id",
			Operator: query.Equals,
			Value:    val,
		},
	}}
}

func IdNot(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "id",
			Operator: query.NotEquals,
			Value:    val,
		},
	}}
}

func IdGreaterThan(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "id",
			Operator: query.GreaterThan,
			Value:    val,
		},
	}}
}

func IdLessThan(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "id",
			Operator: query.LessThan,
			Value:    val,
		},
	}}
}

func IdGreaterOrEqual(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "id",
			Operator: query.GreaterOrEqual,
			Value:    val,
		},
	}}
}

func IdLessOrEqual(val uint32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "id",
			Operator: query.LessOrEqual,
			Value:    val,
		},
	}}
}

func Name(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "name",
			Operator: query.Equals,
			Value:    val,
		},
	}}
}

func NameNot(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "name",
			Operator: query.NotEquals,
			Value:    val,
		},
	}}
}

func NameContains(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "name",
			Operator: query.Like,
			Value:    fmt.Sprintf("'%%%s%%'", val),
		},
	}}
}

func NameContainsNot(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "name",
			Operator: query.NotLike,
			Value:    fmt.Sprintf("'%%%s%%'", val),
		},
	}}
}

func NameStartsWith(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "name",
			Operator: query.Like,
			Value:    fmt.Sprintf("'%s%%'", val),
		},
	}}
}

func NameStartsWithNot(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "name",
			Operator: query.NotLike,
			Value:    fmt.Sprintf("'%s%%'", val),
		},
	}}
}

func NameEndsWith(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "name",
			Operator: query.Like,
			Value:    fmt.Sprintf("'%%%s'", val),
		},
	}}
}

func NameEndsWithNot(val string) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "name",
			Operator: query.NotLike,
			Value:    fmt.Sprintf("'%%%s'", val),
		},
	}}
}

