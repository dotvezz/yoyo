// Generated by github.com/yoyo-project/yoyo

package no_pk_table

import (
	"fmt"

	"github.com/yoyo-project/yoyo/example/mysql/yoyo/repositories/query"
)

type Query struct {
	n query.Node
}

func (q Query) SQL() (string, []interface{}) {
	cs, ps := q.n.SQL()
	return fmt.Sprintf("WHERE %s", cs), ps
}

func (q Query) Or(q2 Query) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, q2.n},
		Operator: query.Or,
	}}
}

func (q Query) Col(val int32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, Col(val).n},
		Operator: query.And,
	}}
}

func (q Query) ColNot(val int32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, ColNot(val).n},
		Operator: query.And,
	}}
}

func (q Query) ColGreaterThan(val int32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, ColGreaterThan(val).n},
		Operator: query.And,
	}}
}

func (q Query) ColLessThan(val int32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, ColLessThan(val).n},
		Operator: query.And,
	}}
}

func (q Query) ColGreaterOrEqual(val int32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, ColGreaterOrEqual(val).n},
		Operator: query.And,
	}}
}

func (q Query) ColLessOrEqual(val int32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, ColLessOrEqual(val).n},
		Operator: query.And,
	}}
}

func (q Query) Col2(val int32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, Col2(val).n},
		Operator: query.And,
	}}
}

func (q Query) Col2Not(val int32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, Col2Not(val).n},
		Operator: query.And,
	}}
}

func (q Query) Col2GreaterThan(val int32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, Col2GreaterThan(val).n},
		Operator: query.And,
	}}
}

func (q Query) Col2LessThan(val int32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, Col2LessThan(val).n},
		Operator: query.And,
	}}
}

func (q Query) Col2GreaterOrEqual(val int32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, Col2GreaterOrEqual(val).n},
		Operator: query.And,
	}}
}

func (q Query) Col2LessOrEqual(val int32) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, Col2LessOrEqual(val).n},
		Operator: query.And,
	}}
}


func Col(val int32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "col",
			Operator: query.Equals,
			Value:    val,
		},
	}}
}

func ColNot(val int32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "col",
			Operator: query.NotEquals,
			Value:    val,
		},
	}}
}

func ColGreaterThan(val int32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "col",
			Operator: query.GreaterThan,
			Value:    val,
		},
	}}
}

func ColLessThan(val int32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "col",
			Operator: query.LessThan,
			Value:    val,
		},
	}}
}

func ColGreaterOrEqual(val int32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "col",
			Operator: query.GreaterOrEqual,
			Value:    val,
		},
	}}
}

func ColLessOrEqual(val int32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "col",
			Operator: query.LessOrEqual,
			Value:    val,
		},
	}}
}

func Col2(val int32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "col2",
			Operator: query.Equals,
			Value:    val,
		},
	}}
}

func Col2Not(val int32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "col2",
			Operator: query.NotEquals,
			Value:    val,
		},
	}}
}

func Col2GreaterThan(val int32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "col2",
			Operator: query.GreaterThan,
			Value:    val,
		},
	}}
}

func Col2LessThan(val int32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "col2",
			Operator: query.LessThan,
			Value:    val,
		},
	}}
}

func Col2GreaterOrEqual(val int32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "col2",
			Operator: query.GreaterOrEqual,
			Value:    val,
		},
	}}
}

func Col2LessOrEqual(val int32) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "col2",
			Operator: query.LessOrEqual,
			Value:    val,
		},
	}}
}

