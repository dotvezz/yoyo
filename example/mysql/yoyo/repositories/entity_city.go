// Generated by github.com/yoyo-project/yoyo

package repositories

import (
	"database/sql"
	"fmt"
	
)

type City struct { 
	Id uint32
	Name string
	// For tracking persistence
	persisted *City
}

// HasChanged is intended to help understand if the entity's current values are represented in the database.
// A few examples are provided below:
//   - For a City which was created outside of a CityRepository, HasChanged will return false
//     even if it was used as the input for CityRepository.Save.
//   - For an City returned from CityRepository.Save, HasChanged will return true. However,
//     changing the value of any field on that City will cause its value to diverge from the last-known
//     persisted value. In that case, its HasChanged method will return false.
//
// The method only tracks changes made to the City, and does NOT track changes on the database itself.
func (e *City) HasChanged() bool {
	return e.persisted != nil &&
		e.Id == e.persisted.Id &&
		e.Name == e.persisted.Name
}

func (e *City) CopyValuesFrom(input City) {
    e.Id = input.Id
    e.Name = input.Name
}

type Citys struct {
	// If we're not in a transaction, then City saves memory by wrapping a *sql.Rows to scan from the connection
	// buffer on-demand.
	// This uses less application memory but more connections to the DBMS.
	rs *sql.Rows

	// If we are in a transaction, then City reads the entire result set to memory to clear the buffer and allow
	// other queries to run on the goroutine.
	// This uses more application memory but fewer connections to the DBMS.
	i  int
	es []City
}

// Next is intended to feel familiar to the Next method of sql.Rows. In fact, when not in a transaction,
// it uses the sql.Rows Next method internally.
func (es *Citys) Next() bool {
	if es.rs != nil {
		// not in a transaction
		return es.rs.Next()
	} else {
		// in a transaction
		es.i++
		return es.i < len(es.es)
	}
}

// Scan is intended to feel familiar to the Scan method of sql.Rows. In fact, when not in a transaction,
// it uses the sql.Rows Scan method internally.
func (es *Citys) Scan(e *City) (err error) {
	if e == nil {
		return fmt.Errorf("in Citys.Scan: passed a nil entity")
	}

	// scan from the rows if NOT IN a transaction
	if es.rs != nil {
		return es.scan(e)
	}

	// load an entity from memory if IN a transaction
	return es.load(e)
}

// scan wraps the Scan method of sql.Rows, only used when not in a connection to minimize memory usage
func (es *Citys) scan(e *City) (err error) {
	err = es.rs.Scan(&e.Id, &e.Name)
	persisted := *e
	e.persisted = &persisted
	return err
}

// load pulls a result from memory, only used if in a transaction to avoid connection contention
func (es *Citys) load(e *City) (err error) {
	if es.i >= len(es.es) || es.i < 0 {
		return fmt.Errorf("in Citys.point: out of range")
	}
	*e = es.es[es.i]
	persisted := *e
	e.persisted = &persisted
	return nil
}