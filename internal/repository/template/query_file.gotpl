// Generated by github.com/yoyo-project/yoyo

package {{ .PackageName }}

import ({{ range .Imports }}
	{{.}}{{end}}

	"{{ .RepositoriesPackage }}query"
)

type Query struct {
	n query.Node
}

func (q Query) SQL() (string, []interface{}) {
	cs, ps := q.n.SQL()
	return fmt.Sprintf("WHERE %s", cs), ps
}

func (q Query) Or(q2 Query) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, q2.n},
		Operator: query.Or,
	}}
}
{{ range .Columns }}{{ $ = . }}{{ range .Operations }}
func (q Query) {{ $.ExportedGoName }}{{ if ne .Name "Equals" }}{{ .Name }}{{ end }}({{ if not .NullCheck }}val {{ $.BaseType }}{{ end }}) Query {
	return Query{query.Node{
		Children: &[2]query.Node{q.n, {{ $.ExportedGoName }}{{ if ne .Name "Equals" }}{{ .Name }}{{ end }}({{ if not .NullCheck }}val{{ end }}).n},
		Operator: query.And,
	}}
}
{{ end }}{{ end }}
{{ range .Columns }}{{ $ = . }}{{ range .Operations }}
func {{ $.ExportedGoName }}{{ if ne .Name "Equals" }}{{ .Name }}{{ end }}({{ if not .NullCheck }}val {{ $.BaseType }}{{ end }}) Query {
	return Query{query.Node{
		Condition: query.Condition{
			Column:   "{{ $.Name }}",
			Operator: query.{{ .Operator }},{{ if not .NullCheck }}
			Value:    {{.Val}},{{ end }}
		},
	}}
}
{{ end }}{{ end }}
